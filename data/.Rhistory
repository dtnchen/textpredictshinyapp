logReg2 <- glm(factor(1-shuttle$use) ~ shuttle$wind,family="binomial")
summary(logReg)$coef
summary(logReg2)$coef
data("InsectSprays")
head(InsectSprays)
glm1 <- glm(InsectSprays$count ~ factor(InsectSprays$spray, family="poisson")
glm1 <- glm(InsectSprays$count ~ factor(InsectSprays$spray, family="poisson"))
glm1 <- glm(InsectSprays$count ~ factor(InsectSprays$spray), family="poisson")
summary(glm1)
coefs <- summary(glm1)$coef
coefs[1,1]
coefs[2,1]
exp(coefs[1,1])/exp(coefs[1,1] + coefs[2,1])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knot = 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
knots <- seq(0, 8 * pi, length = 20);
head(knots)
knots
knot = c("0")
knot
knot = c(0)
knot
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineTerms
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineTerms
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
yhat
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(lm(y ~ xMat - 1))
xMat
11.2*11
800,000*1.038/15
800000*1.038/15
800000*1.038/(12*15)
1600000*1.038/(12*30)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
install.packages(caret)
package(caret)
install.packages(Caret)
install.packages("caret")
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
install.packages("kernlab")
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
summary(spam)
M <- abs(cor(training[,-58]))
diag(M)
diag(M)<-0
which(M>0.8,arr.ind=T)
11.29*(25.56/425.54)
11.29*((25.56+43.6)/425.54)
11.29-1.834884
(11.29-1.834884)*3
print, 15./20.
15./20.
20./15.
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(predictors)
head(diagnosis)
clear
rm
rmdir
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
summary(predictors)
summary(diagnosis)
head(diagnosis)
library(caret)
trainIndex = createDataPartition(diagnosis, p=0.50, list=FALSE)
trainIndex2 = createDataPartition(diagnosis, p=0.50)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength,p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
trainIndex2 = createDataPartition(diagnosis, p=0.50,list=FALSE)
adData = data.frame(diagnosis, predictors)
plot(mixtures$CompressiveStrength)
summary(mixtures)
?cut2
?plot
qplot(mixtures$CompressiveStrength,colour=cut2(Cement)
qplot(mixtures$CompressiveStrength,colour=cut2(Cement))
qplot(mixtures$CompressiveStrength,colour="Cement"
qplot(mixtures$CompressiveStrength,colour="Cement")
qplot(CompressiveStrength,colour=Cement,data=mixtures)
qplot(CompressiveStrength,colour=cut2(Cement),data=mixtures)
length(mixtures$CompressiveStrength)
foo<- ind(1030)
ind <- 1:1030
qplot(ind,CompressiveStrength,colour=cut2(Cement),data=mixtures)
qplot(ind,CompressiveStrength,colour=cut2(FlyAsh),data=mixtures)
qplot(ind,CompressiveStrength,colour=cut2(agexact.fit()),data=mixtures)
qplot(ind,CompressiveStrength,colour=cut2(Age),data=mixtures)
qplot(FlyAsh,CompressiveStrength,data=mixtures)
qplot(agexact.fit(),CompressiveStrength,data=mixtures)
qplot(Age,CompressiveStrength,data=mixtures)
qplot(ind,CompressiveStrength,colour=cut2(BlastFurnaceSlag),data=mixtures)
qplot(ind,CompressiveStrength,colour=cut2(Water),data=mixtures)
qplot(ind,CompressiveStrength,colour=cut2(SuperPlasticizer),data=mixtures)
qplot(ind,CompressiveStrength,colour=cut2(Superplasticizer),data=mixtures)
qplot(ind,CompressiveStrength,colour=cut2(CoarseAggregate),data=mixtures)
qplot(ind,CompressiveStrength,colour=cut2(FineeAggregate),data=mixtures)
qplot(ind,CompressiveStrength,colour=cut2(FineAggregate),data=mixtures)
histogram(mixtures$Superplasticizer)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
head(training)
summary(training)
colnames(training)
foo <- colnames(training) == "IL*"
foo
foo <- colnames(training) == "male"
foo
foo <- "IL" %in% colnames(training)
foo
bar <- c("IL")
foo <- bar %in% colnames(training)
foo
foo <- grepl("IL",colnames(training))
foo
colnames(training[-foo])
colnames(training[foo])
colnames(training[-foo])
inTrain
which(foo)
colnames(training[-which(foo)])
colnames(training[which(foo)])
foo <- grepl("IL_",colnames(training))
colnames(training[which(foo)])
length(foo)
bar <- which(foo)
bar
bar = bar(1:length(bar)-1)
bar = bar[1:length(bar)-1]
colnames(training[bar])
preProc <- preProcess(training[bar],method="pca",pcaComp=2)
head(preProc)
PC <- predict(preProc,training[bar])
PC
summary(prcomp(training[bar],scale=TRUE))
head(training[bar])
head(training)
bar
paste(1,bar)
c("1",bar)
bar2<- c("1",bar)
head(training[bar2])
training[bar2]
training[bar]
head(training[bar])
head(training)
foo <- grepl("IL_|diagnosis",colnames(training))
which(foo)
bar <- which(foo)
bar = bar[1:length(bar)-1]
head(training[bar])
summary(prcomp(training[bar],scale=TRUE))
bar2 <- bar
foo <- grepl("IL_",colnames(training))
bar <- which(foo)
bar = bar[1:length(bar)-1]
head(training[bar])
summary(prcomp(training[bar],scale=TRUE))
trainingIL <- training[bar2]
head(trainingIL)
head(trainingIL[,-1])
preProc <- preProcess(trainingIL[,-1],method="pca",pcaComp=7)
PC <- predict(preProc,trainingIL[,-1])
PCfit <- train(training$diagnosis ~ ., method="glm",data=PC)
library(kernlab)
PCfit <- train(training$diagnosis ~ ., method="glm",data=PC)
PCfit <- train(trainingIL$diagnosis ~ ., method="glm",data=PC)
install.packages('caret',dependencies=TRUE)
install.packages("caret", dependencies = TRUE)
PCfit <- train(trainingIL$diagnosis ~ ., method="glm",data=PC)
library(caret)
PCfit <- train(trainingIL$diagnosis ~ ., method="glm",data=PC)
testingIL <- testing[bar2]
head(testingIL)
head(trainingIL)
testPC <- predict(preProc,testingIL[,-1])
confusionMatrix(testingIL$diagnosis,predict(PCfit,testPC))
LMfit <- train(trainingIL$diagnosis ~ ., method="glm",data=training[,-1])
LMfit <- train(trainingIL$diagnosis ~ ., method="glm",data=trainingIL[,-1])
testLM <- predict(LMfit,testingIL[,-1])
confusionMatrix(testingIL$diagnosis,predict(LMfit,testLM))
confusionMatrix(testingIL$diagnosis,testLM
confusionMatrix(testingIL$diagnosis,testLM)
11.29*(25.56/425.54)
11.29*(43.6/425.54)
3*(1.16 + 0.68 + 4.15 + 3.325 + 0.71 + 1.665 + 3.36)
3*(11.29 + 4.15 + 3.325 + 0.71 + 1.665 + 3.36)
73.15 - 45.15
3*(20./14.)
4.15 * 3
1.1567*3
3*.678
3*3.325
3*0.71
3*1.665
3*3.36
3.47 + 2.03 + 12.45 + 9.975 + 2.13 + 5 + 10.08 + 14 + 14
33.76*2
4.3*(28/73.135)
4.3*(14/73.135)
4.3*(14./73.135)
3*(10/30)
5.3*(14./73.135)
5.2*(14./73.135)
217/512
library(caret)
train
predict
sapply
install.packages(shiny)
install.packages("shiny")
library(shiny)
install.packages('devtools')
library(devtools)
apt-get install libssl-dev/unstable
install.packages("devtools")
install.packages('git2r')
install.packages("devtools")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
devtools::install_github("ropensci/git2r")
install.packages('devtools')
devtools::install_github("ropensci/git2r")
library(devtools)
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("libgit2")
install.packages("libgit2")
version R
version
install.packages("devtools")
install.packages('git2r')
install.packages('caret')
version
version
install.packages('caret')
install.packages(minqa)
install.packages('minqa'')
install.packages('minqa')
install.packages('SparseM)
install.packages('SparseM')
install.packages('quantreg')
install.packages('git2r')
install.packages('libgit2')
install.packages('devtools')
install.packages("git2r")
devtools::install_github('ropensci/git2r')
install.packages("git2r")
install.packages("devtools")
install.packages("git2r")
install.packages("devtools")
library(slidify)
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
265.4 + 5 + .5
(265.4 + 5 + .5)/4.2
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
names(axis_vars)
switch(names(axis_vars)[1], names(axis_vars)[2])
switch(names(axis_vars)[1], names(axis_vars)[1])
switch(names(axis_vars)[1], names(axis_vars)[3])
switch(names(axis_vars)[1], names(axis_vars))
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
axis_vars
axis_vars[1]
input$xvar
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
axis_vars
axis_vars[1]
axis_vars[[1]]
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
names(foo)
names(axis_vars)
SNPs
SNPdata
names(SNPdata)
SNPdata()
common_SNPs()
m
foo
shiny::runApp()
exit
q
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
names(axis_vars)
axis_vars
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
#clean up the GIANT data
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
shiny::runApp('datasciencecoursera/dataproducts')
install.packages("tm")
library(tm)
.33*69.44/51.04
.33/2.33
2.33/.33
2.31/.33
.22*(8.68/6.38)
5*69.44
5*51.04
5*42.72
347.2 + 255.2 + 20 + 213.6
836/6.8
2.31/7.
1-.1488
.1488/.8512
11.29*4
4.15*4
4*3.325
4*.071
4*.71
4*1.665
4*3.36
wordcloud(d2$word,d2$freq, scale=c(5,.5),min.freq=2,max.words=10, random.order=FALSE, rot.per=.05, colors=pal, vfont=c("sans serif","plain"))
363.2 + 20.0 + 861.0 + 30.0
1274.2 + 50 + 50 + 50 + 50 + 72
.1748-.1478
150 + 20 + 69.48 + 16.8589 + 14.0491
270.338/4.2
con<-file("en_US.blogs.txt")
blogs<-readLines(con)
close(con)
con<-file("en_US.twitter.txt")
twit<-readLines(con)
close(con)
con<-file("en_US.news.txt")
news<-readLines(con)
close(con)
2*pi
1/2*pi
gc()
gc()
gc()
foo = 1:10
foo
foo[sample(foo, replace=TRUE)]
foo[sample(foo, replace=FALSE)]
foo[sample(foo, size=5,replace=FALSE)]
foo[sample(foo, size=5,replace=TRUE)]
foo[sample(foo, size=5,replace=TRUE)]
foo[sample(foo, size=5,replace=FALSE)]
foo[sample(foo, size=5,replace=FALSE)]
foo[sample(foo, size=5,replace=FALSE)]
foo[sample(foo, size=5,replace=FALSE)]
foo[sample(foo, size=5,replace=FALSE)]
foo[sample(foo, size=5,replace=FALSE)]
foo[sample(foo, size=5,replace=FALSE)]
foo[sample(foo, size=.5*length(foo),replace=FALSE)]
foo[sample(foo, size=.5*length(foo),replace=FALSE)]
foo[sample(foo, size=.5*length(foo),replace=FALSE)]
foo[sample(foo, size=.5*length(foo),replace=FALSE)]
foo[sample(foo, size=.5*length(foo),replace=FALSE)]
foo[sample(foo, size=.5*length(foo),replace=FALSE)]
foo[sample(foo, size=.5*length(foo),replace=FALSE)]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
set.seed(3413)
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
set.seed(3413)
foo[sample(foo, size=.5*length(foo))]
set.seed(3413)
foo[sample(foo, size=.5*length(foo))]
.25*13
round(.25*13)
foo = 1:10
foo[sample(foo, size=.25*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.5*length(foo))]
foo[sample(foo, size=.3*length(foo))]
foo[sample(foo, size=.35*length(foo))]
69.4801*2
16.8589*2
14.0491*2
320 + 40 + 138.96 + 33.718 + 28.098
(320 + 40 + 138.96 + 33.718 + 28.098)/4.2
library(htmlwidgets)
library(shiny)
library(plotly)
library('leaflet')
install.packages('leaflet')
library('leaflet')
library('DT')
install.packages('DT')
library('DT')
getwd()
setwd("datasciencecoursera/capstone/textpredictshinyapp/")
setwd("data")
if (!exists("onegrams")) onegrams <- readRDS("onegrams_twit0p03.rds")
